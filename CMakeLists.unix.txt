#set here the version number **** only update upon tagging a release!
set (KratosMultiphysics_VERSION_MAJOR 3)
set (KratosMultiphysics_VERSION_MINOR 3)

#get subversion data. This is done automatically by cmake
include (GenerateExportHeader)

find_package(Subversion QUIET)
if(Subversion_FOUND)
  get_filename_component(ABS_PROJECT_SOURCE_DIR ${PROJECT_SOURCE_DIR} REALPATH)
  include(FindSubversion)
#  Subversion_WC_INFO(${ABS_PROJECT_SOURCE_DIR} KRATOS_SVN_REVISION)
  configure_file(
      "${PROJECT_SOURCE_DIR}/kratos_version.h.in"
      "${PROJECT_SOURCE_DIR}/kratos/includes/kratos_version.h"
      )
else()
  # if svn is not found use 0 as a default placeholder
  set (KRATOS_SVN_REVISION_WC_REVISION 0)
  configure_file(
    "${PROJECT_SOURCE_DIR}/kratos_version.h.in"
    "${PROJECT_SOURCE_DIR}/kratos/includes/kratos_version.h"
    )
endif()

#set compiler flags
if(${CMAKE_COMPILER_IS_GNUCXX})
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -funroll-loops -ffast-math -fno-finite-math-only -Wall -Wno-strict-aliasing ")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -funroll-loops -ffast-math -fno-finite-math-only -Wall -Wno-strict-aliasing ")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--no-undefined")
  message("---- additional default options were set for gcc")
  message("---- CMAKE_CXX_FLAGS = ${CMAKE_CXX_FLAGS}")
  message("---- CMAKE_C_FLAGS = ${CMAKE_C_FLAGS}")
endif()
if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  if(${CMAKE_CXX_COMPILER_ID} MATCHES Clang)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC  -funroll-loops -Wall -Wno-unused-local-typedef -Wno-unknown-pragmas  ")
    set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -fPIC -funroll-loops -Wall -Wno-unknown-pragmas  ")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--no-undefined")
    message("---- additional default options were set for clang")
    message("---- CMAKE_CXX_FLAGS = ${CMAKE_CXX_FLAGS}")
    message("---- CMAKE_C_FLAGS = ${CMAKE_C_FLAGS}")
  endif()
  if(${CMAKE_CXX_COMPILER_ID} MATCHES Intel)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC  -funroll-loops -lpthread -wd654 -wd10010  ")
    set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -fPIC -funroll-loops -lpthread -wd654 -wd10010  ")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--no-undefined")
    message("---- additional default options were set for intel compiler")
    message("---- CMAKE_CXX_FLAGS = ${CMAKE_CXX_FLAGS}")
    message("---- CMAKE_C_FLAGS = ${CMAKE_C_FLAGS}")
  endif()
  add_definitions( -fPIC )
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  if(${CMAKE_C_COMPILER} MATCHES "icc.*$")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC  -funroll-loops  ") #-lpthread -wd654 -wd10010  ")
    set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -fPIC -funroll-loops  ") #-lpthread -wd654 -wd10010  ")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--no-undefined")
    message("---- additional default options were set for intel compiler")
    message("---- CMAKE_CXX_FLAGS = ${CMAKE_CXX_FLAGS}")
    message("---- CMAKE_C_FLAGS = ${CMAKE_C_FLAGS}")
  endif()
endif()

if(${MSVC80})
  message("detected compiler as MSVC80")
  set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /EHsc -D_SCL_SECURE_NO_WARNINGS -D_USE_MATH_DEFINES")
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc -D_SCL_SECURE_NO_WARNINGS -D_USE_MATH_DEFINES")
endif()

if(${MSVC90})
  message("detected compiler as MSVC90")
  set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /EHsc -D_SCL_SECURE_NO_WARNINGS -D_USE_MATH_DEFINES")
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc -D_SCL_SECURE_NO_WARNINGS -D_USE_MATH_DEFINES")
endif()

if(${MSVC10})
  message("detected compiler as MSVC10")
  set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /EHsc -D_SCL_SECURE_NO_WARNINGS -D_USE_MATH_DEFINES")
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc -D_SCL_SECURE_NO_WARNINGS -D_USE_MATH_DEFINES")
endif()

if(${MSVC11})
  message("detected compiler as MSVC11")
  set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /EHsc -D_SCL_SECURE_NO_WARNINGS")
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc -D_SCL_SECURE_NO_WARNINGS")
endif()

if(${MSVC12})
  message("detected compiler as MSVC12")
  set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /EHsc -D_SCL_SECURE_NO_WARNINGS")
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc -D_SCL_SECURE_NO_WARNINGS")
endif()

if(${MSVC14})
  message("detected compiler as MSVC14")
  set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /EHsc -D_SCL_SECURE_NO_WARNINGS")
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /EHsc -D_SCL_SECURE_NO_WARNINGS")
endif()

#set kratos specific module path
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/modules")

if(WIN32)
    set(CMAKE_OBJECT_PATH_MAX 200)
endif()

######################################################################################
######################################################################################
######################################################################################

# selected Kratos version for SD
if(DEFINED KRATOS_SD_REF_NUMBER)
    if(${KRATOS_SD_REF_NUMBER} EQUAL 2)
        message("SD message: kratos_bcn2 will be compiled")
        add_definitions(-DKRATOS_SD_REF_NUMBER_2)
    elseif(${KRATOS_SD_REF_NUMBER} EQUAL 3)
        message("SD message: kratos_bcn3 will be compiled")
        add_definitions(-DKRATOS_SD_REF_NUMBER_3)
    else()
        add_definitions(-DKRATOS_SD_REF_NUMBER_2)
    endif()
else()
    message("SD message: kratos_bcn2 will be compiled")
    add_definitions(-DKRATOS_SD_REF_NUMBER_2)
endif()
################################
# selector for data type for indexing
# Theoretically, IndexType span should be equal or larger than that of SizeType
if(DEFINED KRATOS_INDEX_TYPE)
    add_compile_definitions(KRATOS_INDEX_TYPE=${KRATOS_INDEX_TYPE})
    message("Kratos will be compiled with index type = " ${KRATOS_INDEX_TYPE})
else()
    add_compile_definitions(KRATOS_INDEX_TYPE=std::size_t)
    message("Kratos will be compiled with index type = std::size_t" )
endif()

# selector for data type for size of the problem
if(DEFINED KRATOS_SIZE_TYPE)
    add_compile_definitions(KRATOS_SIZE_TYPE=${KRATOS_SIZE_TYPE})
    message("Kratos will be compiled with size type = " ${KRATOS_SIZE_TYPE})
else()
    add_compile_definitions(KRATOS_SIZE_TYPE=std::size_t)
    message("Kratos will be compiled with size type = std::size_t" )
endif()

# selector for double type
if(DEFINED KRATOS_DOUBLE_TYPE)
    add_compile_definitions(KRATOS_DOUBLE_TYPE=${KRATOS_DOUBLE_TYPE})
    message("Kratos will be compiled with double type = " ${KRATOS_DOUBLE_TYPE})
else()
    add_compile_definitions(KRATOS_DOUBLE_TYPE=double)
    message("Kratos will be compiled with double type = double" )
endif()

# selector for complex type
if(DEFINED KRATOS_COMPLEX_TYPE)
    add_compile_definitions(KRATOS_COMPLEX_TYPE=${KRATOS_COMPLEX_TYPE})
    message("Kratos will be compiled with complex type = " ${KRATOS_COMPLEX_TYPE})
else()
    add_compile_definitions(KRATOS_COMPLEX_TYPE=std::complex<double>)
    message("Kratos will be compiled with complex type = std::complex<double>" )
endif()
################################

option(KRATOS_NONSQUARE_SUPPORT "Enable support for non-square system" ON)
if(KRATOS_NONSQUARE_SUPPORT MATCHES ON)
    add_definitions(-DKRATOS_NONSQUARE_SUPPORT)
    message("Kratos will be compiled with support for non-square system")
endif()

################################

##find all dependencies

##*****************************
#find and include OpenMP if possible
option(KRATOS_EXCLUDE_OPENMP "Exclude linking with OpenMP" OFF)
option(KRATOS_USE_INTEL_OPENMP "Use Intel OpenMP instead of the system one" OFF)
if(${KRATOS_EXCLUDE_OPENMP} MATCHES ON)
    message("**********************************************************")
    message("OpenMP calculation was excluced artificially. Remove the var")
    message("KRATOS_EXCLUDE_OPENMP from the configuration script or set it to off to include it")
    message("**********************************************************")
else()
    if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
        if(CMAKE_C_COMPILER_ID MATCHES "Clang")
            set(OpenMP_C "${CMAKE_C_COMPILER}")
            set(OpenMP_C_FLAGS "-fopenmp=libomp -Wno-unused-command-line-argument")
            set(OpenMP_C_LIB_NAMES "libomp" "libgomp" "libiomp5")
            set(OpenMP_libomp_LIBRARY ${OpenMP_C_LIB_NAMES})
            set(OpenMP_libgomp_LIBRARY ${OpenMP_C_LIB_NAMES})
            set(OpenMP_libiomp5_LIBRARY ${OpenMP_C_LIB_NAMES})
        endif()
        if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
            set(OpenMP_CXX "${CMAKE_CXX_COMPILER}")
            set(OpenMP_CXX_FLAGS "-fopenmp=libomp -Wno-unused-command-line-argument")
            set(OpenMP_CXX_LIB_NAMES "libomp" "libgomp" "libiomp5")
            set(OpenMP_libomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
            set(OpenMP_libgomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
            set(OpenMP_libiomp5_LIBRARY ${OpenMP_CXX_LIB_NAMES})
        endif()
    else()
        message("OpenMP included for ${CMAKE_SYSTEM_NAME}")
        find_package(OpenMP)
        if (OPENMP_FOUND)
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
            set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
            message("---- OpenMP_C_SPEC_DATE: " ${OpenMP_C_SPEC_DATE})
            message("---- OpenMP_CXX_SPEC_DATE: " ${OpenMP_CXX_SPEC_DATE})
            message("---- OpenMP_C_VERSION: " ${OpenMP_C_VERSION})
            message("---- OpenMP_CXX_VERSION: " ${OpenMP_CXX_VERSION})
            message("---- OpenMP_C_LIBRARIES: " ${OpenMP_C_LIBRARIES})
            message("---- OpenMP_CXX_LIBRARIES: " ${OpenMP_CXX_LIBRARIES})
            message("---- OpenMP_C_FLAGS: " ${OpenMP_C_FLAGS})
            message("---- OpenMP_CXX_FLAGS: " ${OpenMP_CXX_FLAGS})
        endif()
    endif()
endif()

##*****************************
find_package(Backtrace)
if(Backtrace_FOUND)
    message("Backtrace_LIBRARY: " ${Backtrace_LIBRARY})
    message("Backtrace_INCLUDE_DIR: " ${Backtrace_INCLUDE_DIR})
    message("Backtrace is found")
endif()

##*****************************
#finding and including PYTHON
if(CMAKE_VERSION VERSION_LESS "3.27")
    find_package(PythonLibs REQUIRED)
    string(REPLACE "." ";" PYTHON_VERSION_STRING_ARRAY ${PYTHONLIBS_VERSION_STRING})
    list(GET PYTHON_VERSION_STRING_ARRAY 0 PYTHON_VERSION_MAJOR)
    list(GET PYTHON_VERSION_STRING_ARRAY 1 PYTHON_VERSION_MINOR)
    list(GET PYTHON_VERSION_STRING_ARRAY 2 PYTHON_VERSION_PATCH)
    add_compile_definitions(PY_MAJOR_VERSION=${PYTHON_VERSION_MAJOR})
else()
    find_package (Python COMPONENTS Development)
    message("Python_LIBRARIES: " ${Python_LIBRARIES})
    message("Python_LIBRARIES_DEBUG: " ${Python_LIBRARIES_DEBUG})
    message("Python_LIBRARIES_RELEASE: " ${Python_LIBRARIES_RELEASE})
    set(PYTHON_INCLUDE_DIRS ${Python_INCLUDE_DIRS})
    set(PYTHON_LIBRARIES ${Python_LIBRARIES})
    set(PYTHON_VERSION_MAJOR ${Python_VERSION_MAJOR})
    set(PYTHON_VERSION_MINOR ${Python_VERSION_MINOR})
    set(PYTHON_VERSION_PATCH ${Python_VERSION_PATCH})
    add_compile_definitions(PY_MAJOR_VERSION=${Python_VERSION_MAJOR})
endif()
include_directories(${PYTHON_INCLUDE_DIRS})
link_directories(${PYTHON_LIBRARIES})
message(STATUS "PYTHON_VERSION_MAJOR: " ${PYTHON_VERSION_MAJOR})
message(STATUS "PYTHON_VERSION_MINOR: " ${PYTHON_VERSION_MINOR})

##*****************************
#finding and including BOOST library
option(Boost_USE_STATIC_LIBS "Use Boost static libraries"  OFF)
option(Boost_USE_MULTITHREADED "Use Boost's multithread support" ON)
option(Boost_REALPATH "Use Boost real path to resolve symlinks" ON)
if(CMAKE_VERSION VERSION_LESS "3.30")
    message(STATUS "BOOST_ROOT: " ${BOOST_ROOT})
    find_package(Boost COMPONENTS python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR} log REQUIRED)
else()
    # starting from cmake 3.30 we have to use BoostConfig.cmake to find Boost. Set Boost_DIR to the location of BoostConfig.cmake
    message(STATUS "Boost_DIR: " ${Boost_DIR})
    find_package(Boost CONFIG REQUIRED COMPONENTS python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR} log)
endif()
include_directories(${Boost_INCLUDE_DIRS})
message(STATUS "Boost_VERSION_MACRO: " ${Boost_VERSION_MACRO})
if (Boost_VERSION_MACRO GREATER 108100)
    if(CMAKE_VERSION VERSION_LESS "3.30")
        find_package(Boost COMPONENTS python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR} log timer REQUIRED)
    else()
        find_package(Boost CONFIG COMPONENTS python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR} log timer REQUIRED)
    endif()
endif()

#follow the symbolic links for the python lib only if needed
if(${INSTALL_RUNKRATOS} MATCHES ON)
    if(NOT MSVC)
        foreach( l ${PYTHON_LIBRARIES})
        get_filename_component(aaa ${l} REALPATH)
            set(PYTHON_LIBRARIES_REALPATH ${PYTHON_LIBRARIES_REALPATH} ${aaa})
        endforeach(l)
        set(PYTHON_LIBRARIES ${PYTHON_LIBRARIES_REALPATH} CACHE STRING "exact file of the PYTHON library" FORCE)
    endif()
endif()
message(STATUS "PYTHON_LIBRARIES: " ${PYTHON_LIBRARIES})

option(KRATOS_USE_DEBUG_PYTHON_LIBRARY "Specify the use of debug python library" OFF)
if(MSVC AND NOT KRATOS_USE_DEBUG_PYTHON_LIBRARY)
    if(PYTHON_LIBRARIES MATCHES "d$")
        set(KRATOS_USE_DEBUG_PYTHON_LIBRARY ON)
    else()
        set(KRATOS_USE_DEBUG_PYTHON_LIBRARY OFF)
    endif()
endif()
message(STATUS "KRATOS_USE_DEBUG_PYTHON_LIBRARY: " ${KRATOS_USE_DEBUG_PYTHON_LIBRARY})
if(${KRATOS_USE_DEBUG_PYTHON_LIBRARY})
    add_definitions(-DBOOST_DEBUG_PYTHON)
endif()

##*****************************
#finding blas and lapack if needed
option(BLAS_INCLUDE_NEEDED "Specify the need for Blas and Lapack libraries" OFF)
if(${EXTERNAL_SOLVERS_APPLICATION} MATCHES ON)
    set(BLAS_INCLUDE_NEEDED ON)
    ##if prescribed set the fortran mangling
    if(DEFINED ${KRATOS_SUPERLU_FORTRAN_MANGLING})
      add_definitions(${KRATOS_SUPERLU_FORTRAN_MANGLING})
    else(DEFINED ${KRATOS_SUPERLU_FORTRAN_MANGLING})
      add_definitions(-DADD_)
    endif(DEFINED ${KRATOS_SUPERLU_FORTRAN_MANGLING})
endif()
if(${TRILINOS_APPLICATION} MATCHES ON)
    set(BLAS_INCLUDE_NEEDED ON)
endif()

if(${BLAS_INCLUDE_NEEDED} MATCHES ON )
    if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
        enable_language( Fortran )
        include(FortranCInterface)
        FortranCInterface_HEADER(FC.h MACRO_NAMESPACE "FC_")
    endif()

    #linking to the absolute value of the blas
    find_package(BLAS REQUIRED)
    include_directories(${BLAS_INCLUDE_DIRS})
    foreach( lib ${BLAS_LIBRARIES})
        get_filename_component(aaa ${lib} REALPATH)
        set(BLAS_LIBRARIES_REALPATH ${BLAS_LIBRARIES_REALPATH} ${aaa})
    endforeach()
    set(BLAS_LIBRARIES ${BLAS_LIBRARIES_REALPATH} CACHE STRING "exact file of the blas library" FORCE)
    link_directories(${BLAS_LIBRARIES})

    set( CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${BLAS_LINKER_FLAGS}" CACHE STRING "Linker flags for shared libs" FORCE)
    message("---- linker flags with blas =" ${BLAS_LINKER_FLAGS})
    message("---- BLA_VENDOR = " ${BLA_VENDOR})

    #linking to the absolute value of the lapack
    find_package(LAPACK REQUIRED)
    message("---- LAPACK = " ${LAPACK_LIBRARIES})
    foreach( lib ${LAPACK_LIBRARIES})
        get_filename_component(aux ${lib} REALPATH)
        set(LAPACK_LIBRARIES_REALPATH ${LAPACK_LIBRARIES_REALPATH} ${aux})
    endforeach()
    set(LAPACK_LIBRARIES ${LAPACK_LIBRARIES_REALPATH} CACHE STRING "exact file of the lapack library" FORCE)
    message("---- LAPACK modified = " ${LAPACK_LIBRARIES})
    include_directories(${LAPACK_INCLUDE_DIRS})
    link_directories(${LAPACK_LIBRARIES})

    if(MSVC)
        # blas
        set(BLAS_RUNTIME_LIBRARIES "")
        foreach(lib ${BLAS_LIBRARIES})
            get_filename_component(_lib_dir ${lib} DIRECTORY)
            get_filename_component(_lib_name_we ${lib} NAME_WE)
            find_file(_runtime_lib_blas
                NAMES "lib${_lib_name_we}.dll" "${_lib_name_we}.dll"
                PATHS ${_lib_dir}
                NO_DEFAULT_PATH
            )
            list(APPEND BLAS_RUNTIME_LIBRARIES ${_runtime_lib_blas})
        endforeach()
        # lapack
        set(LAPACK_RUNTIME_LIBRARIES "")
        foreach(lib ${LAPACK_LIBRARIES})
            get_filename_component(_lib_dir ${lib} DIRECTORY)
            get_filename_component(_lib_name_we ${lib} NAME_WE)
            find_file(_runtime_lib_lapack
                NAMES "lib${_lib_name_we}.dll" "${_lib_name_we}.dll"
                PATHS ${_lib_dir}
                NO_DEFAULT_PATH
            )
            list(APPEND LAPACK_RUNTIME_LIBRARIES ${_runtime_lib_lapack})
        endforeach()
    else()
        set(BLAS_RUNTIME_LIBRARIES ${BLAS_LIBRARIES})
        set(LAPACK_RUNTIME_LIBRARIES ${LAPACK_LIBRARIES})
    endif()
endif()

##*****************************
#finding Mpi
option(MPI_NEEDED "Specify if MPI is needed for the compilation" OFF)
if(${METIS_APPLICATION} MATCHES ON)
    set(MPI_NEEDED ON)
endif()
if(${TRILINOS_APPLICATION} MATCHES ON)
    set(MPI_NEEDED ON)
endif()
if(${MPI_SEARCH_APPLICATION} MATCHES ON)
    set(MPI_NEEDED ON)
endif()

if(${MPI_NEEDED} MATCHES ON)
    find_package(MPI REQUIRED)
    set(CMAKE_CXX_COMPILE_FLAGS ${CMAKE_CXX_COMPILE_FLAGS} ${MPI_COMPILE_FLAGS})
    set(CMAKE_C_COMPILE_FLAGS ${CMAKE_C_COMPILE_FLAGS} ${MPI_COMPILE_FLAGS})
    set(CMAKE_CXX_LINK_FLAGS ${CMAKE_CXX_LINK_FLAGS} ${MPI_LINK_FLAGS})
    message("Kratos is compiled with MPI support")
    if(WIN32) # install MPI dlls on Windows
        set(MPI_DLL "C:/Windows/System32/msmpi.dll") # in case of Microsoft MPI
        if(EXISTS "${MPI_DLL}")
            install(FILES "${MPI_DLL}" DESTINATION libs)
        endif()
    endif()
endif()

##*****************************

######################################################################################
######################################################################################
######################################################################################
#include internal dependencies
include_directories( ${CMAKE_SOURCE_DIR}/external_libraries )
include_directories( ${CMAKE_SOURCE_DIR}/external_libraries/zlib )
# we have to add this for zconf
include_directories( ${CMAKE_BINARY_DIR}/external_libraries/zlib )

#defines needed for Python
add_definitions( -DKRATOS_PYTHON )
if (${CMAKE_BUILD_TYPE} MATCHES Release)
    add_definitions( -DNDEBUG )
endif()
set(KRATOS_PYTHON TRUE)

# enable Bezier geometry for specific applications
if((${ISOGEOMETRIC_APPLICATION} MATCHES ON) OR (${FINITE_CELL_APPLICATION} MATCHES ON))
    add_definitions( -DENABLE_BEZIER_GEOMETRY )
endif()

#include subdirectories
add_subdirectory(external_libraries/zlib)
add_subdirectory(external_libraries/gidpost)
add_subdirectory(external_libraries/tetgen1.5.0)
add_subdirectory(kratos)
add_subdirectory(applications)

# compiles "krun and packages the python lib needed"
if(${INSTALL_RUNKRATOS} MATCHES ON)
    add_subdirectory(run_kratos)
endif()

if(${MPI_NEEDED} MATCHES ON)
    add_subdirectory(external_libraries/mpi_python)
else()
    install(FILES "${CMAKE_SOURCE_DIR}/external_libraries/mpi_python/nompi.py" DESTINATION KratosMultiphysics RENAME mpi.py)
endif()

#set installation directory
if(DEFINED KRATOS_INSTALL_PREFIX)
    file(TO_CMAKE_PATH "${KRATOS_INSTALL_PREFIX}" CMAKE_INSTALL_PREFIX)
    message("---- user defined install dir = ${CMAKE_INSTALL_PREFIX}")
else(DEFINED KRATOS_INSTALL_PREFIX)
    set(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR} )
    message("---- standard install dir = ${CMAKE_INSTALL_PREFIX}")
endif()

################################################################################

# install embedded python - install a portable version of Python, which free user from installing it manually
# This is mostly useful for Windows users. I'm asking myself if I allowed the students to be so much lazy.
if(${INSTALL_EMBEDDED_PYTHON} MATCHES ON)
    if(NOT EMBEDDED_PYTHON_DIR)
        message(FATAL_ERROR "EMBEDDED_PYTHON_DIR must be provided to install the embedded python")
    endif()
    file(TO_CMAKE_PATH "${EMBEDDED_PYTHON_DIR}" EMBEDDED_PYTHON_DIR)
    install(DIRECTORY ${EMBEDDED_PYTHON_DIR}/ DESTINATION embedded_python)
    if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
        configure_file(${CMAKE_SOURCE_DIR}/cmake/templates/embedded_python_cmd.bat.in ${CMAKE_BINARY_DIR}/embedded_python_cmd.bat)
        install(FILES ${CMAKE_BINARY_DIR}/embedded_python_cmd.bat DESTINATION . RENAME ${CMAKE_PROJECT_NAME}Cmd.bat)
        configure_file(${CMAKE_SOURCE_DIR}/cmake/templates/embedded_python_cmd.ps1.in ${CMAKE_BINARY_DIR}/embedded_python_cmd.ps1)
        install(FILES ${CMAKE_BINARY_DIR}/embedded_python_cmd.ps1 DESTINATION . RENAME ${CMAKE_PROJECT_NAME}Cmd.ps1)
        configure_file(${CMAKE_SOURCE_DIR}/cmake/templates/embedded_python_pip.bat.in ${CMAKE_BINARY_DIR}/embedded_python_pip.bat)
        install(FILES ${CMAKE_BINARY_DIR}/embedded_python_pip.bat DESTINATION . RENAME ${CMAKE_PROJECT_NAME}Pip.bat)
    endif()
endif()

################################################################################
# install core files for the KratosMultiphysics python module
# note that this does not install KratosLoader.py, as it is different for installation and packaging runs (see next code block)
install(FILES "${CMAKE_SOURCE_DIR}/kratos/python_interface/__init__.py" DESTINATION KratosMultiphysics )
install(FILES "${CMAKE_SOURCE_DIR}/kratos/python_interface/kratos_utilities.py" DESTINATION KratosMultiphysics )
install(FILES "${CMAKE_SOURCE_DIR}/kratos/python_interface/kratos_globals.py" DESTINATION KratosMultiphysics )
install(FILES "${CMAKE_SOURCE_DIR}/kratos/python_interface/application_importer.py" DESTINATION KratosMultiphysics )
install(FILES "${CMAKE_SOURCE_DIR}/kratos/python_interface/kratos_unittest.py" DESTINATION KratosMultiphysics RENAME KratosUnittest.py )

# message(STATUS "Boost_PYTHON_LIBRARY: " ${Boost_PYTHON_LIBRARY})
# message(STATUS "Boost_PYTHON_LIBRARY_RELEASE: " ${Boost_PYTHON_LIBRARY_RELEASE})
# message(STATUS "Boost_PYTHON_LIBRARY_DEBUG: " ${Boost_PYTHON_LIBRARY_DEBUG})
# message(STATUS "Boost_LIBRARIES: " ${Boost_LIBRARIES})
# message(STATUS "Boost_PYTHON_LIBRARIES: " ${Boost_PYTHON_LIBRARIES})
# message(STATUS "Boost_PYTHON${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}_LIBRARIES: " ${Boost_PYTHON${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}_LIBRARIES})
if(CMAKE_VERSION VERSION_LESS "3.30")
    if (CMAKE_BUILD_TYPE MATCHES Release)
        message("---- boost python lib used = " ${Boost_PYTHON_LIBRARY_RELEASE})
        install(FILES ${Boost_PYTHON_LIBRARY_RELEASE} DESTINATION libs)
    elseif((CMAKE_BUILD_TYPE MATCHES Debug))
        message("---- boost python lib used = " ${Boost_PYTHON_LIBRARY_DEBUG})
        install(FILES ${Boost_PYTHON_LIBRARY_DEBUG} DESTINATION libs)
    endif()
else()
    message("---- boost python lib used = " ${Boost_LIBRARIES})
    install(IMPORTED_RUNTIME_ARTIFACTS ${Boost_LIBRARIES} DESTINATION libs)
endif()

#install blas and lapack runtime librariess
if(${BLAS_INCLUDE_NEEDED} MATCHES ON)
    message("---- installed blas = " ${BLAS_RUNTIME_LIBRARIES})
    install(FILES ${BLAS_RUNTIME_LIBRARIES} DESTINATION libs)
    message("---- installed lapack = " ${LAPACK_RUNTIME_LIBRARIES})
    install(FILES ${LAPACK_RUNTIME_LIBRARIES} DESTINATION libs)
endif()

################################################################################
if(DEFINED EXTRA_RUNTIME_LIBS)
    file(TO_CMAKE_PATH "${EXTRA_RUNTIME_LIBS}" EXTRA_RUNTIME_LIBS)
    message(STATUS "EXTRA_RUNTIME_LIBS:")
    set(EXTRA_RUNTIME_LIBS_LIST "")
    foreach(lib IN LISTS EXTRA_RUNTIME_LIBS)
        message(STATUS "  ${lib}")
        if (${lib} MATCHES "[*?]")
            message(STATUS "Wildcard detected in extra runtime lib: ${lib}")
            file(GLOB expanded_files_ "${lib}")
            if (expanded_files_)
                foreach(lib1 IN LISTS expanded_files_)
                    list(APPEND EXTRA_RUNTIME_LIBS_LIST ${lib1})
                endforeach()
            endif()
        else()
            list(APPEND EXTRA_RUNTIME_LIBS_LIST ${lib})
        endif()
    endforeach()
    install(FILES ${EXTRA_RUNTIME_LIBS_LIST} DESTINATION libs)
endif()

################################################################################
option(INSTALL_PYTHON_FILES "Install the Python scripts" OFF)
if(${INSTALL_PYTHON_FILES} MATCHES ON)
    configure_file(
        ${CMAKE_SOURCE_DIR}/packaging_aux/KratosLoader_rel.py.in
        ${CMAKE_BINARY_DIR}/packaging_aux/KratosLoader.py
        @ONLY
    )
else()
    set(KRATOS_SCRIPTS_INSTALL_PREFIX "${CMAKE_SOURCE_DIR}")
    configure_file(
        ${CMAKE_SOURCE_DIR}/packaging_aux/KratosLoader.py.in
        ${CMAKE_BINARY_DIR}/packaging_aux/KratosLoader.py
        @ONLY
    )
endif()
install(
    FILES ${CMAKE_BINARY_DIR}/packaging_aux/KratosLoader.py
    DESTINATION KratosMultiphysics
)

if(${INSTALL_PYTHON_FILES} MATCHES ON)
    file(WRITE ${CMAKE_SOURCE_DIR}/packaging_aux/kratos.conf "${CMAKE_INSTALL_PREFIX}/libs")
    install(FILES ${CMAKE_SOURCE_DIR}/packaging_aux/kratos.conf DESTINATION packaging )
    install(FILES ${CMAKE_SOURCE_DIR}/packaging_aux/script.py DESTINATION . )

    set(CPACK_PACKAGE_VERSION_MAJOR 8)
    set(CPACK_PACKAGE_VERSION_MINOR 8)
    set(CPACK_PACKAGE_VERSION_PATCH 8)

    if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
        set(CPACK_GENERATOR "DEB")
        set(CPACK_DEBIAN_PACKAGE_MAINTAINER "GB") #required
        #set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)
        set(CPACK_DEBIAN_PACKAGE_DEPENDS ${CPACK_DEBIAN_PACKAGE_DEPENDS} "libc6, libgcc1, libgfortran3, libgomp1, libopenmpi1.3, libparmetis3.1, libstdc++6, openmpi-bin, ${KRATOS_EXTRA_PACKAGE_DEPENDS} " )
        #set(CPACK_DEBIAN_PACKAGE_DEPENDS ${CPACK_DEBIAN_PACKAGE_DEPENDS} " openmpi-bin, libboost-mpi-python-dev, ${KRATOS_EXTRA_PACKAGE_DEPENDS}" )
        set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA "${CMAKE_SOURCE_DIR}/packaging_aux/postinst;${CMAKE_SOURCE_DIR}/packaging_aux/prerm;")
        set(CPACK_PACKAGING_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
    elseif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
        set(CPACK_GENERATOR "NSIS")
        # CPACK_PACKAGING_INSTALL_PREFIX should not be set for Windows build, see https://gitlab.kitware.com/cmake/cmake/-/issues/17534
        set(CPACK_NSIS_INSTALL_ROOT $PROFILE)                       # install to the user folder to avoid asking permission
        set(CPACK_NSIS_DEFINES "RequestExecutionLevel user")        # no admin prompt
        set(CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL ON)          # uninstall previous version before installation
        set(CPACK_PACKAGE_INSTALL_DIRECTORY ${CMAKE_PROJECT_NAME})  # do not add version number to the installation folder
        set(CPACK_NSIS_MUI_ICON "${CMAKE_SOURCE_DIR}/packaging_aux/icons8-p-96.ico")    # installer icon
    endif()
    string(TIMESTAMP CURRENT_DATE "%Y.%m.%d")
    string(TIMESTAMP CURRENT_TIME "%H.%M.%S")
    set(CPACK_PACKAGE_VERSION "${CURRENT_DATE}.${CURRENT_TIME}")
    set(CPACK_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}-${CPACK_PACKAGE_VERSION}")
    set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/license.txt")

    include(CPack)

    # Tell NSIS to run the post-install script
    if(${INSTALL_EMBEDDED_PYTHON} MATCHES ON)
        set(CPACK_NSIS_EXTRA_INSTALL_COMMANDS "ExecWait '\\\"$INSTDIR\\\\${CMAKE_PROJECT_NAME}Pip.bat\\\"'")
    endif()
endif()

################################################################################
##echo user options
message("Summary of defined cmake options:")
message("CMAKE_BUILD_TYPE ........................... ${CMAKE_BUILD_TYPE}")
message("CMAKE_C_COMPILER ........................... ${CMAKE_C_COMPILER}")
message("CMAKE_C_FLAGS .............................. ${CMAKE_C_FLAGS}")
if (CMAKE_BUILD_TYPE MATCHES Release)
    message("CMAKE_C_FLAGS_RELEASE ...................... ${CMAKE_C_FLAGS_RELEASE}")
elseif((CMAKE_BUILD_TYPE MATCHES Debug))
    message("CMAKE_C_FLAGS_DEBUG ........................ ${CMAKE_C_FLAGS_DEBUG}")
elseif((CMAKE_BUILD_TYPE MATCHES RelWithDebInfo))
    message("CMAKE_C_FLAGS_RELWITHDEBINFO ............... ${CMAKE_C_FLAGS_RELWITHDEBINFO}")
endif()
message("CMAKE_CXX_COMPILER ......................... ${CMAKE_CXX_COMPILER}")
message("CMAKE_CXX_FLAGS ............................ ${CMAKE_CXX_FLAGS}")
if (CMAKE_BUILD_TYPE MATCHES Release)
    message("CMAKE_CXX_FLAGS_RELEASE .................... ${CMAKE_CXX_FLAGS_RELEASE}")
elseif((CMAKE_BUILD_TYPE MATCHES Debug))
    message("CMAKE_CXX_FLAGS_DEBUG ...................... ${CMAKE_CXX_FLAGS_DEBUG}")
elseif((CMAKE_BUILD_TYPE MATCHES RelWithDebInfo))
    message("CMAKE_CXX_FLAGS_RELWITHDEBINFO ............. ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
endif()
message("CMAKE_SHARED_LINKER_FLAGS .................. ${CMAKE_SHARED_LINKER_FLAGS}")
if (CMAKE_BUILD_TYPE MATCHES Release)
    message("CMAKE_SHARED_LINKER_FLAGS_RELEASE .......... ${CMAKE_SHARED_LINKER_FLAGS_RELEASE}")
elseif((CMAKE_BUILD_TYPE MATCHES Debug))
    message("CMAKE_SHARED_LINKER_FLAGS_DEBUG ............ ${CMAKE_SHARED_LINKER_FLAGS_DEBUG}")
elseif((CMAKE_BUILD_TYPE MATCHES RelWithDebInfo))
    message("CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO ... ${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO}")
endif()
message("CMAKE_EXE_LINKER_FLAGS ..................... ${CMAKE_EXE_LINKER_FLAGS}")
if (CMAKE_BUILD_TYPE MATCHES Release)
    message("CMAKE_EXE_LINKER_FLAGS_RELEASE ............. ${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
elseif((CMAKE_BUILD_TYPE MATCHES Debug))
    message("CMAKE_EXE_LINKER_FLAGS_DEBUG ............... ${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
elseif((CMAKE_BUILD_TYPE MATCHES RelWithDebInfo))
    message("CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO ...... ${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO}")
endif()
message("")
